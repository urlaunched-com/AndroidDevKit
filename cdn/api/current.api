// Signature format: 4.0
package com.urlaunched.android.cdn.data.remote.api {

  public interface CdnMediaApi {
    method @retrofit2.http.GET("/api/v1/signed_downloads/{media_id}") public suspend Object? generateDownloadLink(@retrofit2.http.Path("media_id") int mediaId, kotlin.coroutines.Continuation<? super retrofit2.Response<com.urlaunched.android.cdnmodels.remote.GenerateDownloadLinkRemoteModel>>);
  }

}

package com.urlaunched.android.cdn.data.remote.source {

  public interface CdnDataSource {
    method public suspend Object? downloadFile(com.urlaunched.android.cdnmodels.domain.links.MediaLink mediaLink, String path, kotlin.coroutines.Continuation<? super kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.cdnmodels.domain.downloadstate.DownloadState>>);
    method public suspend Object? getPrivateFileLink(com.urlaunched.android.cdnmodels.domain.links.MediaLink.Private mediaLink, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<java.lang.String>>);
  }

  public final class CdnDataSourceImpl implements com.urlaunched.android.cdn.data.remote.source.CdnDataSource {
    ctor public CdnDataSourceImpl(com.urlaunched.android.cdn.data.remote.api.CdnMediaApi cdnMediaApi, okhttp3.OkHttpClient okHttpClient);
    method public suspend Object? downloadFile(com.urlaunched.android.cdnmodels.domain.links.MediaLink mediaLink, String path, kotlin.coroutines.Continuation<? super kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.cdnmodels.domain.downloadstate.DownloadState>>);
    method public suspend Object? getPrivateFileLink(com.urlaunched.android.cdnmodels.domain.links.MediaLink.Private mediaLink, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<java.lang.String>>);
  }

}

package com.urlaunched.android.cdn.data.repository {

  public final class OriginalFilePreviewLinkRepositoryImpl implements com.urlaunched.android.cdn.domain.repository.OriginalFilePreviewLinkRepository {
    ctor public OriginalFilePreviewLinkRepositoryImpl(com.urlaunched.android.cdn.data.remote.source.CdnDataSource cdnDataSource);
    method public suspend Object? downloadFile(com.urlaunched.android.cdnmodels.domain.links.MediaLink mediaLink, String path, kotlin.coroutines.Continuation<? super kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.cdnmodels.domain.downloadstate.DownloadState>>);
    method public suspend Object? getPrivateFileLink(com.urlaunched.android.cdnmodels.domain.links.MediaLink.Private mediaLink, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<java.lang.String>>);
  }

}

package com.urlaunched.android.cdn.domain.repository {

  public interface OriginalFilePreviewLinkRepository {
    method public suspend Object? downloadFile(com.urlaunched.android.cdnmodels.domain.links.MediaLink mediaLink, String path, kotlin.coroutines.Continuation<? super kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.cdnmodels.domain.downloadstate.DownloadState>>);
    method public suspend Object? getPrivateFileLink(com.urlaunched.android.cdnmodels.domain.links.MediaLink.Private mediaLink, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<java.lang.String>>);
  }

}

package com.urlaunched.android.cdn.domain.usecases {

  public final class DownloadFileUseCase {
    ctor public DownloadFileUseCase(com.urlaunched.android.cdn.domain.repository.OriginalFilePreviewLinkRepository repository);
    method public suspend operator Object? invoke(com.urlaunched.android.cdnmodels.domain.links.MediaLink mediaLink, String path, kotlin.coroutines.Continuation<? super kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.cdnmodels.domain.downloadstate.DownloadState>>);
  }

  public final class GetOriginalFileLinkUseCase {
    ctor public GetOriginalFileLinkUseCase(com.urlaunched.android.cdn.domain.repository.OriginalFilePreviewLinkRepository repository);
    method public suspend operator Object? invoke(com.urlaunched.android.cdnmodels.domain.links.MediaLink.Private mediaLink, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<java.lang.String>>);
  }

}

package com.urlaunched.android.cdn.generators {

  public final class MediaCDNGenerator {
    method public com.urlaunched.android.cdnmodels.domain.links.MediaLink.Public generateBitmapLink(com.urlaunched.android.cdnmodels.domain.media.MediaDomainModel media, com.urlaunched.android.cdnmodels.domain.transform.Edits edits, com.urlaunched.android.cdnmodels.CdnConfig cdnConfig);
    method public com.urlaunched.android.cdnmodels.domain.links.MediaLink generateLink(com.urlaunched.android.cdnmodels.domain.media.MediaDomainModel media, com.urlaunched.android.cdnmodels.CdnConfig cdnConfig);
    field public static final com.urlaunched.android.cdn.generators.MediaCDNGenerator INSTANCE;
  }

}

package com.urlaunched.android.cdn.models {

  public final class CdnConfig {
    ctor public CdnConfig(String publicImageCdn, String publicMediaCdn, String privateMediaCdn, String privateMediaEndpoint, String bucket, String tempBucket, String privateBucket);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String component4();
    method public String component5();
    method public String component6();
    method public String component7();
    method public com.urlaunched.android.cdnmodels.CdnConfig copy(String publicImageCdn, String publicMediaCdn, String privateMediaCdn, String privateMediaEndpoint, String bucket, String tempBucket, String privateBucket);
    method public String getBucket();
    method public String getPrivateBucket();
    method public String getPrivateMediaCdn();
    method public String getPrivateMediaEndpoint();
    method public String getPublicImageCdn();
    method public String getPublicMediaCdn();
    method public String getTempBucket();
    property public final String bucket;
    property public final String privateBucket;
    property public final String privateMediaCdn;
    property public final String privateMediaEndpoint;
    property public final String publicImageCdn;
    property public final String publicMediaCdn;
    property public final String tempBucket;
  }

}

